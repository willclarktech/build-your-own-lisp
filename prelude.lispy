;;;
;;; Lispy Prelude
;;;

; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function definitions
(def {fun} (\ {f b} {
	def (head f) (\ (tail f) b)
}))

; Unpack/pack list for function
(fun {unpack f l} {
	eval (join (list f) l)
})
(fun {pack f & xs} {f xs})

(def {curry} unpack)
(def {uncurry} pack)

; Perform several things in sequence
(fun {do & l} {
	if (== l nil)
		{nil}
		{last l}
})

; Open new scope
(fun {let b} {
	((\ {_} b) ())
})

; Logical functions
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; Miscellaneous functions
(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; List functions
(fun {fst l} {
	eval (head l)
})
(fun {snd l} {
	eval (head (tail l))
})
(fun {trd l} {
	eval (head (tail (tail l)))
})

(fun {len l} {
	if (== l nil)
		{0}
		{+ 1 (len (tail l))}
})

(fun {nth n l} {
	if (== n 0)
		{fst l}
		{nth (- n 1) (tail l)}
})

(fun {last l} {
	nth (- (len l) 1) l
})

(fun {take n l} {
	if (== n 0)
		{nil}
		{join (head l) (take (- n 1) (tail l))}
})

(fun {drop n l} {
	if (== n 0)
		{l}
		{drop (- n 1) (tail l)}
})

(fun {split n l} {
	list (take n l) (drop n l)
})

(fun {elem x l} {
	if (== l nil)
		{false}
		{if (== x (fst l))
			{true}
			{elem x (tail l)}
		}
})

(fun {map f l} {
	if (== l nil)
		{nil}
		{join (list (f (fst l))) (map f (tail l ))}
})

(fun {filter f l} {
	if (== l nil)
		{nil}
		{join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

(fun {foldl f z l} {
	if (== l nil)
		{z}
		{foldl f (f z (fst l)) (tail l)}
})

(fun {sum l} {
	foldl + 0 l
})

(fun {product l} {
	foldl * 1 l
})

; Conditional functions
(def {otherwise} true)

(fun {select & cs} {
	if (== cs nil)
		{error "No selection found"}
		{
			if (fst (fst cs))
				{snd (fst cs)}
				{unpack select (tail cs)}
		}
})

(fun {month-day-suffix i} {
	select
		{(== i 0) "st"}
		{(== i 1) "nd"}
		{(== i 2) "rd"}
		{otherwise "th"}
})

(fun {case x & cs} {
	if (== cs nil)
		{error "No case found"}
		{
			if (== x (fst (fst cs)))
				{snd (fst cs)}
				{unpack case (join (list x) (tail cs))}
		}
})

(fun {day-name x} {
	case x
		{0 "Monday"}
		{1 "Tuesday"}
		{2 "Wednesday"}
		{3 "Thursday"}
		{4 "Friday"}
		{5 "Saturday"}
		{6 "Sunday"}
})

; Fibonacci
(fun {fib n} {
	select
		{(== n 0) 0}
		{(== n 1) 1}
		{otherwise (+ (fib (- n 1))(fib (- n 2)))}
})
